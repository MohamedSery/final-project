
Master_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000925  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073c  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c9  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cc  00000000  00000000  00001c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "UART.h"
#include "SPI.h"
int main(void)
{
	Uint8t data =0;
	UART_Init();
  7c:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Init>
	SPI_Init();
  80:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Init>
	
    while (1) 
    {
		data = UART_Receive();
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_Receive>
		if (data =='1')
  88:	81 33       	cpi	r24, 0x31	; 49
  8a:	21 f4       	brne	.+8      	; 0x94 <main+0x18>
		{
			
		 SPI_Transmit(100);
  8c:	84 e6       	ldi	r24, 0x64	; 100
  8e:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_Transmit>
  92:	f8 cf       	rjmp	.-16     	; 0x84 <main+0x8>
			
		}
			else if (data =='2')
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	b1 f7       	brne	.-20     	; 0x84 <main+0x8>
			{
				
				SPI_Transmit(200);
  98:	88 ec       	ldi	r24, 0xC8	; 200
  9a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_Transmit>
  9e:	f2 cf       	rjmp	.-28     	; 0x84 <main+0x8>

000000a0 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	8f 7b       	andi	r24, 0xBF	; 191
  aa:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x53;//0b 0101 0011
  b8:	83 e5       	ldi	r24, 0x53	; 83
  ba:	8d b9       	out	0x0d, r24	; 13
  bc:	08 95       	ret

000000be <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
  be:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <SPI_Transmit+0x2>
}
  c4:	08 95       	ret

000000c6 <UART_Init>:
}
void UART_Transmit(Uint8t data)
{
	UDR = data;
	while(GET_BIT(UCSRA, TXC) != 1);
}
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	80 bd       	out	0x20, r24	; 32
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	89 b9       	out	0x09, r24	; 9
  d2:	10 bc       	out	0x20, r1	; 32
  d4:	08 95       	ret

000000d6 <UART_Receive>:
Uint8t UART_Receive(void)
{
	while(GET_BIT(UCSRA, RXC) != 1);
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <UART_Receive>
	return UDR;
  da:	8c b1       	in	r24, 0x0c	; 12
}
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
